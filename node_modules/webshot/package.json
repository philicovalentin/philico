{
  "_args": [
    [
      {
        "raw": "webshot@^0.18.0",
        "scope": null,
        "escapedName": "webshot",
        "name": "webshot",
        "rawSpec": "^0.18.0",
        "spec": ">=0.18.0 <0.19.0",
        "type": "range"
      },
      "/Users/mercierv/philico"
    ]
  ],
  "_from": "webshot@>=0.18.0 <0.19.0",
  "_id": "webshot@0.18.0",
  "_inCache": true,
  "_location": "/webshot",
  "_npmOperationalInternal": {
    "host": "packages-6-west.internal.npmjs.com",
    "tmp": "tmp/webshot-0.18.0.tgz_1455495117204_0.26677108160220087"
  },
  "_npmUser": {
    "name": "bkokoszka",
    "email": "brenden.kokoszka@gmail.com"
  },
  "_npmVersion": "1.4.6",
  "_phantomChildren": {},
  "_requested": {
    "raw": "webshot@^0.18.0",
    "scope": null,
    "escapedName": "webshot",
    "name": "webshot",
    "rawSpec": "^0.18.0",
    "spec": ">=0.18.0 <0.19.0",
    "type": "range"
  },
  "_requiredBy": [
    "#USER",
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/webshot/-/webshot-0.18.0.tgz",
  "_shasum": "057e6925bc3970ae97eed56fc23118578cbcfdc3",
  "_shrinkwrap": null,
  "_spec": "webshot@^0.18.0",
  "_where": "/Users/mercierv/philico",
  "author": {
    "name": "Brenden Kokoszka"
  },
  "bugs": {
    "url": "https://github.com/brenden/node-webshot/issues"
  },
  "contributors": [
    {
      "name": "Brenden Kokoszka",
      "email": "brenden.kokoszka@gmail.com"
    },
    {
      "name": "Matthew Chase Whittemore",
      "email": "mcwhittemore@gmail.com"
    }
  ],
  "dependencies": {
    "cross-spawn": "^0.2.3",
    "graceful-fs": "~3.0.4",
    "phantomjs-prebuilt": "^2.1.3",
    "tmp": "~0.0.25"
  },
  "description": "Easy website screenshots",
  "devDependencies": {
    "imagemagick": "git://github.com/rsms/node-imagemagick.git",
    "mocha": "*",
    "should": "*"
  },
  "directories": {},
  "dist": {
    "shasum": "057e6925bc3970ae97eed56fc23118578cbcfdc3",
    "tarball": "https://registry.npmjs.org/webshot/-/webshot-0.18.0.tgz"
  },
  "engine": [
    "node >=0.7.00"
  ],
  "homepage": "https://github.com/brenden/node-webshot#readme",
  "keywords": [
    "screenshot",
    "screengrab"
  ],
  "license": "MIT",
  "main": "./lib/webshot.js",
  "maintainers": [
    {
      "name": "bkokoszka",
      "email": "bkokoszk@nd.edu"
    }
  ],
  "name": "webshot",
  "optionalDependencies": {
    "phantomjs-prebuilt": "^2.1.3"
  },
  "readme": "[![Build Status](https://travis-ci.org/brenden/node-webshot.svg?branch=master)](https://travis-ci.org/brenden/node-webshot)\n# node-webshot\n\nWebshot provides a simple API for taking webpage screenshots. The module is a\nlight wrapper around PhantomJS, which utilizes WebKit to perform the page\nrendering.\n\n## Examples\n\nA simple url example:\n\n```javascript\nvar webshot = require('webshot');\n\nwebshot('google.com', 'google.png', function(err) {\n  // screenshot now saved to google.png\n});\n```\n\nAn html example:\n\n```javascript\nvar webshot = require('webshot');\n\nwebshot('<html><body>Hello World</body></html>', 'hello_world.png', {siteType:'html'}, function(err) {\n  // screenshot now saved to hello_world.png\n});\n```\n\nAlternately, the screenshot can be streamed back to the caller:\n\n```javascript\nvar webshot = require('webshot');\nvar fs      = require('fs');\n\nvar renderStream = webshot('google.com');\nvar file = fs.createWriteStream('google.png', {encoding: 'binary'});\n\nrenderStream.on('data', function(data) {\n  file.write(data.toString('binary'), 'binary');\n});\n```\n\nAn example showing how to take a screenshot of a site's mobile version:\n\n```javascript\nvar webshot = require('webshot');\n\nvar options = {\n  screenSize: {\n    width: 320\n  , height: 480\n  }\n, shotSize: {\n    width: 320\n  , height: 'all'\n  }\n, userAgent: 'Mozilla/5.0 (iPhone; U; CPU iPhone OS 3_2 like Mac OS X; en-us)'\n    + ' AppleWebKit/531.21.20 (KHTML, like Gecko) Mobile/7B298g'\n};\n\nwebshot('flickr.com', 'flickr.jpeg', options, function(err) {\n  // screenshot now saved to flickr.jpeg\n});\n```\n\n## Options\nAn optional `options` object can be passed as the parameter directly preceding\nthe callback in a call to webshot.\n\n<table>\n  <thead>\n    <tr>\n      <th>Option</th>\n      <th>Default Value</th>\n      <th>Description</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>windowSize</th>\n      <td>\n<pre>{ width: 1024\n, height: 768 }</pre>\n      </td>\n      <td>The dimensions of the browser window. <em>screenSize</em> is an alias\n      for this property.</td>\n    </tr>\n    <tr>\n      <th>shotSize</th>\n      <td>\n<pre>{ width: 'window'\n, height: 'window' }</pre>\n      </td>\n      <td>The area of the page document, starting at the upper left corner, to\n      render. Possible values are 'screen', 'all', and a number defining a\n      pixel length.\n      <br /> <br />\n      <strong>'window'</strong> causes the length to be set to the length of\n      the window (i.e. the shot displays what is initially visible within the\n      browser window).\n      <br /> <br />\n      <strong>'all'</strong> causes the length to be set to the length of the\n      document along the given dimension. </td>\n    </tr>\n    <tr>\n      <th>shotOffset</th>\n      <td><pre>{ left: 0\n, right: 0\n, top: 0\n, bottom: 0 }</pre></td>\n      <td>The left and top offsets define the upper left corner of the\n      screenshot rectangle. The right and bottom offsets allow pixels to be\n      removed from the shotSize dimensions (e.g. a shotSize height of 'all' with\n      a bottom offset of 30 would cause all but the last 30 rows of pixels on\n      the site to be rendered).</td>\n    </tr>\n    <tr>\n      <th>phantomPath</th>\n      <td>'phantomjs'</td>\n      <td>The location of phantomjs. Webshot tries to use the binary provided by\n      the phantomjs NPM module, and falls back to 'phantomjs' if the module\n      isn't available.</td>\n    </tr>\n    <tr>\n      <th>phantomConfig</th>\n      <td>{}</td>\n      <td>Object with key value pairs corresponding to phantomjs <a\n      href=\"http://phantomjs.org/api/command-line.html\">command\n      line options</a>. Don't include `--`. For example:\n      `phantomConfig: {'ignore-ssl-errors': 'true'}`</td>\n    </tr>\n    <tr>\n      <th>cookies</th>\n      <td>[]</td>\n      <td>List of cookie objects to use, or null to disable cookies.</td>\n    </tr>\n    <tr>\n      <th>customHeaders</th>\n      <td>null</td>\n      <td>Any additional headers to be sent in the HTTP request.</td>\n    </tr>\n    <tr>\n      <th>defaultWhiteBackground</th>\n      <td>false</td>\n      <td>When taking the screenshot, adds a white background if not defined\n      elsewhere.</td>\n    </tr>\n    <tr>\n      <th>customCSS</th>\n      <td>''</td>\n      <td>When taking the screenshot, adds custom CSS rules if defined.</td>\n    </tr>\n    <tr>\n      <th>quality</th>\n      <td>75</td>\n      <td>JPEG compression quality. A higher number will look better, but creates\n        a larger file. Quality setting has no effect when streaming.</td>\n    </tr>\n    <tr>\n      <th>streamType</th>\n      <td>'png'</td>\n      <td>If streaming is used, this designates the file format of the streamed\n      rendering. Possible values are 'png', 'jpg', and 'jpeg'.  </td>\n    </tr>\n    <tr>\n      <th>siteType</th>\n      <td>'url'</td>\n      <td>siteType indicates whether the content needs to be requested ('url'),\n      loaded locally ('file'), or is being provided directly as a string\n      ('html').</td>\n    </tr>\n    <tr>\n      <th>renderDelay</th>\n      <td>0</td>\n      <td>Number of milliseconds to wait after a page loads before taking the\n      screenshot.</td>\n    </tr>\n    <tr>\n      <th>timeout</th>\n      <td>0</td>\n      <td>Number of milliseconds to wait before killing the phantomjs process\n      and assuming webshotting has failed.  (0 is no timeout.)</td>\n    </tr>\n    <tr>\n      <th>takeShotOnCallback</th>\n      <td>false</td>\n      <td>Wait for the web page to signal to webshot when to take the photo\n      using <code>window.callPhantom('takeShot');</code></td>\n    </tr>\n    <tr>\n      <th>errorIfStatusIsNot200</th>\n      <td>false</td>\n      <td>If the loaded page has a non-200 status code, don't take a screenshot, cause an error instead.</td>\n    </tr>\n    <tr>\n      <th>errorIfJSException</th>\n      <td>false</td>\n      <td>If a script on the page throws an exception, don't take a screenshot, cause an error instead.</td>\n    </tr>\n    <tr>\n      <th>captureSelector</th>\n      <td>false</td>\n      <td>Captures the page area containing the provided selector and saves it to file.</td>\n    </tr>\n  </tbody>\n</table>\n\n### PhantomJS version\nBy default this package installs PhantomJS 1.9.x. Several issues exist in this version that are fixed in v2, but v2 is not yet stable across all platforms. The `phantomPath` option can be used to get around this if you want to try a more recent PhantomJS version. See this issue: https://github.com/brenden/node-webshot/issues/100\n\n### Phantom page properties\nIn addition to these options, the following options can be specified and will be\npassed to the [Phantom page\nobject](https://github.com/ariya/phantomjs/wiki/API-Reference-WebPage):\n`paperSize`, `zoomFactor`, `cookies`, `customHeaders`, and `settings`.\n\n### Phantom callbacks\nArbitrary scripts can be run on the page before it gets rendered by using any of\nPhantom's [page callbacks](https://github.com/ariya/phantomjs/wiki/API-Reference-WebPage#callbacks-list),\nsuch as `onLoadFinished` or `onResourceRequested`. For example, the script below\nchanges the text of every link on the page:\n\n```javascript\nvar options = {\n  onLoadFinished: function() {\n    var links = document.getElementsByTagName('a');\n\n    for (var i=0; i<links.length; i++) {\n      var link = links[i];\n      link.innerHTML = 'My custom text';\n    } \n  }\n};\n```\n\nNote that the script will be serialized and then passed to Phantom as text, so all\nvariable scope information will be lost. However, variables from the caller can be \npassed into the script as follows:\n\n```javascript\nvar options = {\n  onLoadFinished: {\n    fn: function() {\n      var links = document.getElementsByTagName('a');\n\n      for (var i=0; i<links.length; i++) {\n        var link = links[i];\n        link.innerHTML = this.foo;\n      } \n    }\n  , context: {foo: 'My custom text'}\n  }\n};\n```\n\n## Tests\nTests are written with [Mocha](http://visionmedia.github.com/mocha/) and can be\nrun with `npm test`. The tests use [node-imagemagick](http://github.com/rsms/node-imagemagick) and thus require\nthat the [imagemagick CLI tools](http://www.imagemagick.org) be installed.\n\n## Running on Heroku\n[See this comment.](https://github.com/brenden/node-webshot/issues/25#issuecomment-23019665)\n\n## Grunt\n[grunt-webshot](https://npmjs.org/package/grunt-webshot) is a Grunt wrapper for this package.\n\n## CLI\n[webshot-cli](https://npmjs.org/package/webshot-cli) is a CLI interface for this package.\n\n## License\n```\n(The MIT License)\n\nCopyright (c) 2012 Brenden Kokoszka\n\nPermission is hereby granted, free of charge, to any person obtaining a copy of\nthis software and associated documentation files (the 'Software'), to deal in\nthe Software without restriction, including without limitation the rights to\nuse, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of\nthe Software, and to permit persons to whom the Software is furnished to do so,\nsubject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS\nFOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR\nCOPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER\nIN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN\nCONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+ssh://git@github.com/brenden/node-webshot.git"
  },
  "scripts": {
    "test": "mocha --ui bdd --reporter spec --require should ./test/core.js ./test/options/*"
  },
  "version": "0.18.0"
}
